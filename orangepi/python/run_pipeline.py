# file: python/run_pipeline.py

import argparse
import asyncio
import os
import psutil
from typing import Dict, Any, List

# --- Import c√°c th√†nh ph·∫ßn c·ªët l√µi c·ªßa ki·∫øn tr√∫c ---
from database.create_db import create_database
from id.main_id_new import start_id, PersonReID
# ƒê·∫£m b·∫£o c√°c ƒë∆∞·ªùng d·∫´n import n√†y tr·ªè ƒë·∫øn c√°c file ƒë√£ ƒë∆∞·ª£c t·ªëi ∆∞u
from track_local.tracking_3Dpro import Track3DPro
from core.lastest_queue import LatestFrameQueue # S·ª≠a l·ªói ch√≠nh t·∫£ "lastest" -> "latest"
from config import OPI_CONFIG, RPI_CONFIG
from utils.logging_python_orangepi import setup_logging, get_logger

# --- Thi·∫øt l·∫≠p Logging ---
setup_logging()
logger = get_logger(__name__)

# --- C√°c h√†m ph·ª• tr·ª£ (Helpers) ---

def _filter_config(source_config: Dict[str, Any], required_keys: List[str]) -> Dict[str, Any]:
    """L·ªçc v√† tr·∫£ v·ªÅ m·ªôt dictionary m·ªõi ch·ªâ ch·ª©a c√°c key ƒë∆∞·ª£c y√™u c·∫ßu."""
    return {key: source_config.get(key) for key in required_keys if key in source_config}

async def monitor_queue(queue: asyncio.Queue, name: str):
    """Gi√°m s√°t v√† log k√≠ch th∆∞·ªõc h√†ng ƒë·ª£i ƒë·ªãnh k·ª≥."""
    while True:
        try:
            if isinstance(queue, LatestFrameQueue):
                 logger.info(f"H√†ng ƒë·ª£i {name}: [LIFO queue active]")
            else:
                max_size = getattr(queue, 'maxsize', 'N/A')
                logger.info(f"H√†ng ƒë·ª£i {name}: {queue.qsize()}/{max_size}")
            await asyncio.sleep(10)
        except asyncio.CancelledError:
            break

async def monitor_system():
    """Gi√°m s√°t v√† log t·∫£i h·ªá th·ªëng ƒë·ªãnh k·ª≥."""
    while True:
        try:
            cpu = psutil.cpu_percent(interval=1)
            mem = psutil.virtual_memory().percent
            logger.info(f"T·∫£i h·ªá th·ªëng - CPU: {cpu:.1f}%, B·ªô nh·ªõ: {mem:.1f}%")
            await asyncio.sleep(10)
        except asyncio.CancelledError:
            break


# --- H√†m ch√≠nh c·ªßa ·ª©ng d·ª•ng ---
async def main(args: argparse.Namespace):
    """
    ƒêi·ªÉm v√†o ch√≠nh, ƒëi·ªÅu ph·ªëi pipeline theo ki·∫øn tr√∫c ph√¢n t·∫ßng.
    """
    logger.info("="*50)
    logger.info("üöÄ Kh·ªüi ƒë·ªông Pipeline Re-ID Ph√¢n T·∫ßng...")
    logger.info("="*50)

    # 1. Ch·ªçn C·∫•u h√¨nh v√† Module
    logger.info(f"Ch·∫ø ƒë·ªô thi·∫øt b·ªã ƒë∆∞·ª£c ch·ªçn: {args.device_id.upper()}")
    if "opi" in args.device_id:
        ID_CONFIG = OPI_CONFIG
        from core.put_RGBD_final import start_putter
        from core.processing_RGBD_final import start_processor
    else:
        logger.error(f"Ki·∫øn tr√∫c n√†y hi·ªán ƒë∆∞·ª£c t·ªëi ∆∞u cho 'opi'.")
        return

    # 2. Qu·∫£n l√Ω C∆° s·ªü d·ªØ li·ªáu
    db_path = ID_CONFIG.get("db_path")
    if not db_path:
        logger.error("L·ªói c·∫•u h√¨nh: 'db_path' kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y trong config.")
        return

    if args.new_db:
        logger.warning(f"C·ªù --new-db ƒë∆∞·ª£c b·∫≠t. ƒêang x√≥a DB (n·∫øu c√≥): {db_path}")
        for suffix in ["", "-shm", "-wal"]:
            db_file_part = f"{db_path}{suffix}"
            if os.path.exists(db_file_part):
                os.remove(db_file_part)
    
    if not os.path.exists(db_path):
       await create_database(db_path=db_path)

    # 3. L·ªçc c·∫•u h√¨nh v√† Kh·ªüi t·∫°o c√°c Th√†nh ph·∫ßn
    logger.info("Ph√¢n t√°ch c·∫•u h√¨nh v√† kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn...")
    
    # ƒê·ªãnh nghƒ©a t∆∞·ªùng minh c√°c key m√† m·ªói th√†nh ph·∫ßn c·∫ßn
    PUTTER_KEYS = ["rgb_camera_id", "slave_ip", "tcp_port", "rgb_framerate", "bg_learning_time"]
    TRACKER_KEYS = ["calib_file_path", "max_time_lost"]
    PROCESSOR_KEYS = ["calib_file_path", "device_id", "model_path", "results_dir", "distance_threshold_m"]
    PERSON_REID_KEYS = [
        "device_id", "db_path", "output_dir", "feature_threshold", "color_threshold",
        "avg_threshold", "top_k", "thigh_weight", "torso_weight", "feature_weight",
        "color_weight", "temp_timeout", "min_detections", "merge_threshold",
        "face_threshold"
    ]

    putter_config = _filter_config(ID_CONFIG, PUTTER_KEYS)
    tracker_config = _filter_config(ID_CONFIG, TRACKER_KEYS)
    processor_config = _filter_config(ID_CONFIG, PROCESSOR_KEYS)
    person_reid_config = _filter_config(ID_CONFIG, PERSON_REID_KEYS)

    frame_queue = LatestFrameQueue()
    final_result_queue = asyncio.Queue(maxsize=200)

    if not tracker_config.get("calib_file_path"):
        logger.error("L·ªói c·∫•u h√¨nh: 'calib_file_path' l√† b·∫Øt bu·ªôc cho Tracker.")
        return
        
    tracker = Track3DPro(**tracker_config)
    person_reid = PersonReID(**person_reid_config)

    # 4. Qu·∫£n l√Ω v√† Ch·∫°y T√°c v·ª•
    all_tasks = []
    try:
        logger.info("ƒêang t·∫°o v√† kh·ªüi ch·∫°y c√°c t√°c v·ª• c·ªßa pipeline...")
        all_tasks = [
            asyncio.create_task(start_putter(frame_queue, putter_config)),
            asyncio.create_task(start_processor(frame_queue, final_result_queue, tracker, processor_config)),
            asyncio.create_task(start_id(final_result_queue, person_reid)),
            asyncio.create_task(monitor_queue(frame_queue, "Frame (LIFO)")),
            asyncio.create_task(monitor_queue(final_result_queue, "Final Result")),
            asyncio.create_task(monitor_system()),
        ]
        if hasattr(person_reid, '_rabbit_task'):
            all_tasks.append(person_reid._rabbit_task)

        logger.info(f"‚úÖ ƒê√£ kh·ªüi ch·∫°y {len(all_tasks)} t√°c v·ª•. Pipeline ƒëang ho·∫°t ƒë·ªông.")
        await asyncio.gather(*all_tasks)

    except KeyboardInterrupt:
        logger.warning("Ph√°t hi·ªán t√≠n hi·ªáu d·ª´ng...")
    finally:
        logger.info("B·∫Øt ƒë·∫ßu qu√° tr√¨nh d·ªçn d·∫πp v√† t·∫Øt ch∆∞∆°ng tr√¨nh...")
        for task in all_tasks:
            if not task.done():
                task.cancel()
        await asyncio.gather(*all_tasks, return_exceptions=True)
        if hasattr(person_reid, 'rabbit') and hasattr(person_reid.rabbit, 'stop'):
            await person_reid.rabbit.stop()
        logger.info("Ch∆∞∆°ng tr√¨nh ƒë√£ k·∫øt th√∫c m·ªôt c√°ch an to√†n.")


# --- ƒêi·ªÉm v√†o c·ªßa Script ---
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Ch·∫°y Pipeline Re-ID Ph√¢n T·∫ßng.")
    parser.add_argument("--new-db", action="store_true", help="X√≥a v√† t·∫°o l·∫°i DB.")
    parser.add_argument("--device-id", default="opi", choices=["opi", "rpi"], help="Ch·∫ø ƒë·ªô thi·∫øt b·ªã.")
    args = parser.parse_args()
    try:
        asyncio.run(main(args))
    except KeyboardInterrupt:
        logger.info("Ch∆∞∆°ng tr√¨nh ƒë√£ d·ª´ng b·ªüi ng∆∞·ªùi d√πng.")
