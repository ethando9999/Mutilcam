# file: python/core/processing_RGBD_final.py

import asyncio
import cv2
import time
import numpy as np
from typing import Dict, Any

# --- Import c√°c th√†nh ph·∫ßn c·∫ßn thi·∫øt ---
from utils.logging_python_orangepi import get_logger
from utils.yolo_pose import HumanDetection
from utils.pose_color_signature_new import PoseColorSignatureExtractor
from utils.cut_body_part import extract_body_parts_from_frame
from .stereo_projector_final import StereoProjectorFinal
from .height_estimator_pro import HeightEstimatorPro
from utils.latest_queue import LatestFrameQueue # S·ª≠a l·ªói ch√≠nh t·∫£ "lastest"

# <<< S·ª¨A L·ªñI IMPORT: Tr·ªè ƒë·∫øn ƒë√∫ng file ch·ª©a l·ªõp Track3DPro >>>
from tracking.track_3d_pro import Track3DPro

logger = get_logger(__name__)

# --- C·∫•u h√¨nh cho Worker ---
NUM_SLOW_WORKERS = 2  # S·ªë worker x·ª≠ l√Ω s√¢u ch·∫°y song song. Tinh ch·ªânh d·ª±a tr√™n CPU/NPU.
FAST_LOOP_LOG_INTERVAL = 10.0 # Log FPS c·ªßa v√≤ng l·∫∑p nhanh m·ªói 10 gi√¢y.

class FrameProcessorFinal:
    """
    Tri·ªÉn khai ki·∫øn tr√∫c x·ª≠ l√Ω hai t·∫ßng v·ªõi hi·ªáu nƒÉng v√† ƒë·ªô ·ªïn ƒë·ªãnh cao.
    - V√≤ng l·∫∑p nhanh: Ph√°t hi·ªán v√† theo d√µi v·ªã tr√≠.
    - Worker ch·∫≠m: X·ª≠ l√Ω s√¢u c√°c ƒë·∫∑c tr∆∞ng.
    """
    def __init__(self, config: Dict, tracker: Track3DPro):
        self.config = config
        self.tracker = tracker # S·ª≠ d·ª•ng tracker ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o t·ª´ run_pipeline.py

        # Kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn x·ª≠ l√Ω
        self.detector = HumanDetection()
        calib_path = config.get("calib_file_path")
        self.stereo_projector = StereoProjectorFinal(calib_file_path=calib_path)
        self.height_estimator = HeightEstimatorPro(stereo_projector=self.stereo_projector)
        self.pose_processor = PoseColorSignatureExtractor()

        # H√†ng ƒë·ª£i n·ªôi b·ªô k·∫øt n·ªëi gi·ªØa Fast Loop v√† Slow Workers
        self.reid_task_queue = asyncio.Queue(maxsize=100)
        # Semaphore ƒë·ªÉ gi·ªõi h·∫°n s·ªë t√°c v·ª• n·∫∑ng ch·∫°y ƒë·ªìng th·ªùi, tr√°nh qu√° t·∫£i
        self.slow_task_semaphore = asyncio.Semaphore(NUM_SLOW_WORKERS)
        
        logger.info(f"FrameProcessorFinal ƒë√£ kh·ªüi t·∫°o v·ªõi {NUM_SLOW_WORKERS} worker ch·∫≠m.")

    async def run_fast_loop(self, frame_queue: LatestFrameQueue):
        """V√≤ng l·∫∑p nhanh: Nh·∫≠n frame, ch·∫°y YOLO, c·∫≠p nh·∫≠t tracker, v√† g·ª≠i t√°c v·ª•."""
        logger.info("üöÄ V√≤ng l·∫∑p nhanh (Fast Loop) ƒë√£ b·∫Øt ƒë·∫ßu.")
        frame_count = 0
        last_log_time = time.time()

        while True:
            try:
                # Nh·∫≠n g√≥i d·ªØ li·ªáu 4 ph·∫ßn t·ª≠ t·ª´ Putter
                rgb_frame, depth_frame, fgmask, _ = await frame_queue.get()
                
                # C·∫≠p nh·∫≠t v√† log FPS c·ªßa V√≤ng L·∫∑p Nhanh
                frame_count += 1
                current_time = time.time()
                if (current_time - last_log_time) > FAST_LOOP_LOG_INTERVAL:
                    fps = frame_count / (current_time - last_log_time)
                    logger.info(f"üöÄ Fast Loop FPS: {fps:.2f}")
                    frame_count = 0
                    last_log_time = current_time

                # T·ªëi ∆∞u: √Åp d·ª•ng m·∫∑t n·∫° tr·ª´ n·ªÅn tr∆∞·ªõc khi ch·∫°y YOLO
                rgb_foreground = cv2.bitwise_and(rgb_frame, rgb_frame, mask=fgmask)

                # Ch·∫°y detection tr√™n ·∫£nh ƒë√£ ƒë∆∞·ª£c tr·ª´ n·ªÅn
                detection_results = await asyncio.to_thread(self.detector.run_detection, rgb_foreground)
                
                # Chu·∫©n b·ªã danh s√°ch detection cho tracker
                detections = []
                if detection_results:
                    keypoints_data, boxes_data = detection_results
                    for i in range(len(boxes_data)):
                        detections.append({
                            "bbox": boxes_data[i], "keypoints": keypoints_data[i],
                            "tof_depth_map": depth_frame
                        })

                # Gh√©p c·∫∑p v·ªõi tracker
                matches, unmatched_indices = self.tracker.match(detections)
                
                # G·ª≠i t√°c v·ª• cho c√°c detection m·ªõi
                for idx in unmatched_indices:
                    new_detection = detections[idx]
                    new_track_id = self.tracker.register_new_track(new_detection)
                    
                    if new_track_id is not None:
                        task_packet = {
                            "track_id": new_track_id,
                            "detection_data": new_detection,
                            "rgb_frame": rgb_frame
                        }
                        await self.reid_task_queue.put(task_packet)

            except Exception as e:
                logger.error(f"L·ªói trong V√≤ng l·∫∑p nhanh: {e}", exc_info=True)
                await asyncio.sleep(1)

    async def run_slow_worker(self, worker_id: int, final_result_queue: asyncio.Queue):
        """Worker ch·∫≠m: L·∫•y t√°c v·ª•, th·ª±c hi·ªán x·ª≠ l√Ω s√¢u v√† g·ª≠i k·∫øt qu·∫£."""
        logger.info(f"üêå Worker x·ª≠ l√Ω s√¢u #{worker_id} ƒë√£ b·∫Øt ƒë·∫ßu.")
        while True:
            try:
                task_packet = await self.reid_task_queue.get()
                
                async with self.slow_task_semaphore:
                    logger.info(f"üêå Worker #{worker_id} ƒëang x·ª≠ l√Ω s√¢u cho track_id: {task_packet['track_id']}...")
                    processed_data = await self._process_single_detection(task_packet)
                    
                    if processed_data:
                        await final_result_queue.put(processed_data)
                        logger.info(f"‚úÖ Worker #{worker_id} ho√†n t·∫•t x·ª≠ l√Ω cho track_id: {task_packet['track_id']}")

                self.reid_task_queue.task_done()
            except Exception as e:
                logger.error(f"L·ªói kh√¥ng mong mu·ªën trong Worker #{worker_id}: {e}", exc_info=True)

    async def _process_single_detection(self, task_packet: Dict[str, Any]) -> Dict[str, Any] | None:
        """H√†m logic ƒë·ªÉ x·ª≠ l√Ω s√¢u m·ªôt detection, t√°ch ra ƒë·ªÉ d·ªÖ ƒë·ªçc v√† qu·∫£n l√Ω."""
        track_id = task_packet["track_id"]
        detection = task_packet["detection_data"]
        rgb_frame = task_packet["rgb_frame"]
        bbox, keypoints, tof_depth_map = detection["bbox"], detection["keypoints"], detection["tof_depth_map"]

        human_crop = rgb_frame[int(bbox[1]):int(bbox[3]), int(bbox[0]):int(bbox[2])]
        if human_crop.size == 0: return None

        try:
            # <<< GI·∫¢I PH√ÅP: G·ªçi ƒë√∫ng ph∆∞∆°ng th·ª©c c·ªßa PoseColorSignatureExtractor >>>
            # Vui l√≤ng x√°c nh·∫≠n t√™n ph∆∞∆°ng th·ª©c ƒë√∫ng. T√¥i gi·∫£ ƒë·ªãnh l√† 'get_color_signature'.
            tasks_to_run = [
                asyncio.to_thread(self.height_estimator.estimate, keypoints, tof_depth_map),
                asyncio.to_thread(self.pose_processor.get_color_signature, human_crop, keypoints),
                asyncio.to_thread(extract_body_parts_from_frame, human_crop, keypoints)
            ]
            results = await asyncio.gather(*tasks_to_run, return_exceptions=True)

            if any(isinstance(res, Exception) for res in results):
                logger.error(f"T√°c v·ª• con cho track_id {track_id} th·∫•t b·∫°i. Errors: {results}")
                return None
            
            (height_m, height_status), (body_color, _), body_parts = results

            return {
                "track_id": track_id, "bbox": bbox, "keypoints": keypoints,
                "human_box": human_crop, "body_color": body_color, "body_parts": body_parts,
                "est_height_m": height_m, "height_status": height_status,
                "camera_id": self.config.get("device_id", "opi_01")
            }
        except Exception as e:
            logger.error(f"L·ªói khi x·ª≠ l√Ω detection cho track_id {track_id}: {e}", exc_info=True)
            return None


async def start_processor(
    frame_queue: LatestFrameQueue,
    final_result_queue: asyncio.Queue,
    tracker: Track3DPro,
    config: dict
):
    """Kh·ªüi t·∫°o v√† ch·∫°y FrameProcessor v·ªõi ki·∫øn tr√∫c hai t·∫ßng."""
    logger.info("Kh·ªüi ƒë·ªông Processor (Ki·∫øn tr√∫c hai t·∫ßng)...")
    
    processor = FrameProcessorFinal(config=config, tracker=tracker)
    all_processor_tasks = []
    try:
        fast_loop_task = asyncio.create_task(processor.run_fast_loop(frame_queue))
        slow_worker_tasks = [
            asyncio.create_task(processor.run_slow_worker(i, final_result_queue))
            for i in range(NUM_SLOW_WORKERS)
        ]
        all_processor_tasks = [fast_loop_task] + slow_worker_tasks
        await asyncio.gather(*all_processor_tasks)
    except asyncio.CancelledError:
        logger.info("Processor task b·ªã h·ªßy.")
    except Exception as e:
        logger.error(f"L·ªói nghi√™m tr·ªçng trong start_processor: {e}", exc_info=True)
    finally:
        for task in all_processor_tasks:
            if not task.done():
                task.cancel()